# git-cliff ~ default configuration file
# https://git-cliff.org/docs/configuration
#
# Lines starting with "#" are comments.
# Configuration options are organized into tables and keys.
# See documentation for more information on available options.

[changelog]
# template for the changelog header
header = """
# Changelog

"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{% if version %}\
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
            {% if commit.breaking %}[**breaking**] {% endif %}\
            {{ commit.message | upper_first }}\
    {% endfor %}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing s
trim = true
# postprocessors
postprocessors = [
   { pattern = '<REPO>', replace = "https://github.com/MuelNova/rhinebar" }, # replace repository URL
]
# render body even when there are no releases to process
# render_always = true
# output file path

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = false
# filter out the commits that are not conventional
filter_unconventional = false
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# regex for parsing and grouping commits
commit_parsers = [
  {message = "^(✨|:sparkles:)", group = "<!-- 0 -->✨ Feature"},
  {message = "^(💄|🚸|:lipstick:|:children_crossing:)", group = "<!-- 1 -->💄 Update"},
  {message = "^(🐛|:bug:)", group = "🐛 Bugfix"},
  {message = "^(♿️|:wheelchair:)", group = "♿️ Accessibility"},
  {message = "^(📝|:pencil:)", group = "📝 Documentation"},
  {message = "^(♻️|:recycle:)", group = "♻️ Refactor"},
  {message = "^(⬆️|➕|➖|⬇️|:arrow_up:|:heavy_plus_sign:|:heavy_minus_sign:|:arrow_down:)", group = "📦 Dependency"},
  {message = "^(🗑️|:wastebasket:)", group = "🗑️ Deprecation"},
  {message = "^(⚰️|:coffin:)", group = "⚰️ Remove"},
  {message = "^(💥|:boom:)", group = "<!-- 2 -->🚨 Breaking Changes 🚨"},
]
# filter out the commits that are not matched by commit parsers
filter_commits = false
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
